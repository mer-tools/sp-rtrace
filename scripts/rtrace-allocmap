#!/bin/sh
#
# A script for visualizing memory fragmentation in rtrace reports
# using allocmap.
#
# This file is part of sp-rtrace.
#
# Copyright (C) 2006,2010,2012 by Nokia Corporation
#
# Contact: Eero Tamminen <eero.tamminen@nokia.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License 
# version 2 as published by the Free Software Foundation. 
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA
#
# Originally this file was a part of libleaks package, but moved
# to the sp-rtrace package during libleaks redesign.
#
#
# CHANGES
# 
# 2010-12-10
# - store temp files into same directory as where the file is
#   (as $TMPDIR may be full and user cannot change its location)
# - use faster postproc & grep options and better error handling
# - show how many allocations were outside of heap

# show help
if [ $# -lt 1 ]; then
	echo "A script to visualize (with allocmap) where unfreed allocations"
	echo "reported by rtrace are in the process heap, so that you can see"
	echo "whether memory usage increase is because of heap fragmentation or not."
	echo 
	echo "If you give the script multiple leak reports, the allocations"
	echo "from each one are shown with different digit.  If only one report"
	echo "is given, '#' mark is used to indicate each 4KB page 'dirtied'"
	echo "by unfreed allocation(s)."
	echo
	echo "Usage: $0 <rtrace leak reports>"
	exit
fi

map=sp-rtrace-allocmap
postproc=sp-rtrace-postproc
addresses=allocmap-allocs.txt
noheap=allocs-not-in-heap.txt
postfix=allocmap.tmp

if [ -f $noheap ] || [ -f $addresses ]; then
	echo "ERROR: temporary allocmap files exist already:"
	ls -l $noheap $addresses 2> /dev/null
	exit
fi

if [ -z "$(which $map)" ]; then
	echo "$map binary needed for producing the ASCII address map is missing."
	exit
fi

if [ -z "$(which $postproc)" ]; then
	echo "$postproc binary needed for removing freed allocations is missing."
	exit
fi

# args: line match string, prefix for desired dec/hex number, file name
get_value ()
{
	value=$(grep -m 1 "\b$1\b" $3|sed "s/^.*$2\([0-9a-z]\+$\)/\1/")
	if [ \! -z "$value" ]; then
		return
	fi
	echo "ERROR: '$1' header line is missing from the trace!"
	echo
	echo "See the sp-rtrace-postproc output in:"
	echo "  $3"
	echo
	echo "Please make sure that you give SP_RTRACE_MALLINFO=1 environment"
	echo "variable to sp-rtrace when you start tracing, otherwise"
	echo "heap utilization information needed by this tool is missing"
	echo "from the sp-rtrace 'memory' module trace data."
	exit
}

filter='s/^[0-9]\+\. .\+(\([0-9]\+\)) = \(0x[0-9a-f]\+\).*$/\2 \1/'

for trace in $*; do
	echo "Parsing '$trace'..."

	tmp_leaks=$trace-$postfix

	# remove freed allocations
	$postproc -l -b 0 < $trace > $tmp_leaks

	# get the addresses and sizes from leaks report and pipe them to
	# allocmap for producing an ASCII chart of where they are.
	get_value 'heap bottom' '0x' $tmp_leaks
	base=$value
	get_value 'heap top' '0x' $tmp_leaks
	top=$value
	get_value  'lowest block' '0x' $tmp_leaks
	low=$value
	get_value 'malloc_trim' ' ' $tmp_leaks
	trim=$value

	echo "# base=0x$base"     >> $addresses
	echo "# top=0x$top"       >> $addresses
	echo "# low=0x$low"       >> $addresses
	echo "# keepcost=$trim" >> $addresses
	grep -E "^[0-9]+\. " $tmp_leaks|sed "$filter"|sort -n >> $addresses
	rm $tmp_leaks
done

if [ $# -eq 1 ]; then
	# only single report
	opts="-s"
else
	opts=""
fi
$map $opts < $addresses 2> $noheap
rm $addresses

lines=$(wc -l $noheap|cut -d' ' -f1)
if [ $lines -ne 0 ]; then
	echo "WARNING: $lines of the traced allocations were outside of heap."
	echo "See $noheap file for details."
else
	rm $noheap
fi
