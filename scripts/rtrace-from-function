#!/usr/bin/env python
#
# Script for calculating the amount of un-freed allocations originating
# from a given function in given rtrace report.
#
# This file is part of sp-rtrace.
#
# Copyright (C) 2006,2010-2011 by Nokia Corporation
#
# Contact: Eero Tamminen <eero.tamminen@nokia.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License 
# version 2 as published by the Free Software Foundation. 
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA
#
# Originally this file was a part of libleaks package, but moved
# to the sp-rtrace package during libleaks redesign.
#

import sys, re

if len(sys.argv) != 2:
    print "usage: %s <function name>  <  rtrace-report" % sys.argv[0].split('/')[-1]
    sys.exit(1)
func = sys.argv[1]

pattern = re.compile("^[0-9]+\. .+\(([0-9]+)\) = 0x[a-fA-F0-9]+")

total = 0     # total size of allocs
count = 0    # number of allocations
allocs = []  # allocation sizes for current backtrace
first = True # is next alloc the first one

for line in sys.stdin:
    # new line in backtrace?
    if line.startswith("\t0x"):
        first = True
        # requested function found from trace?
        if line.find(func) >= 0:
            count += len(allocs)
            total += sum([int(x) for x in allocs])
            allocs = []
    else:
        # new alloc?
        res = pattern.match(line)
        if res:
            # first alloc in stacktrace?
            if first:
                allocs = [res.group(1)]
                first = False
            else:
                allocs.append(res.group(1))

overhead = 8
print
print "%d allocations, totaling %d bytes + %d bytes overhead" % (count, total, count*overhead)
print "originate from: '*%s*'!" % func
print
print "(overhead is estimated to be %d bytes/alloc)" % overhead
