#!/bin/sh
#
# This script generates leak graphs for given function for all given
# leak files. This file is part of sp-rtrace.
#
# Copyright (C) 2006,2010-2012 by Nokia Corporation
#
# Contact: Eero Tamminen <eero.tamminen@nokia.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License 
# version 2 as published by the Free Software Foundation. 
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA
#
# Originally this file was a part of libleaks package, but moved
# to the sp-rtrace package during libleaks redesign.
#
#
# CHANGES
#
# 2010-08-02
# - Updated this sp-libleaks utility to support rtrace format and
#   moved it to sp-rtrace package
# 2010-09-10
# - Update help and calltree options
# - If destination file is older than source file, re-create it
# - If files are already generated, don't check for / complain
#  about tools needed to generate them
# 2010-11-03
# - Rewrite to handle both binary & text traces and whether they're
#   already processed or not.
# 2010-11-10
# - Use SVG instead of EPS, open generated file with xdg-open,
#   better corner-case error checks
# 2011-01-10
# - retain rtrace.txt extension for post-processed files
# 2011-10-25
# - Fix: really convert callgraph to SVG (not PS)
# - Do callgraph symbol resolving using debug symbols instead of ELF
#   symbol table (much slower & memory hungry, but much better results)
# 2012-06-06
# - Workaround for Ubuntu's Dash shell printf
# - Support for --bfd and --root resolving options

# script name
name=${0##*/}

usage ()
{
	cat << EOF
ERROR: $1!

$name generates SVG callgraph(s) of resource allocation
backtraces going through the methods/functions/libraries with given
name prefix, in all the given trace files.  The graphs are saved
to a subdirectory with a given function name prefix.

(Giving "" as name will list everything.)

Good values for the <limit> percentage are 0.1 - 5, depending on
the trace file contents.

To re-generate the graphs (with new limit), just remove the directory.

EOF
	echo "usage: $name [--bfd] [--root <path>] <function prefix> <limit> <trace files>"
	echo
	echo "ERROR: $1!"
	exit 1
}

# get resolving options
if [ "$1" = "--bfd" ]; then
	method="bfd"
	methodargs="-mmulti-pass"
	shift
else
	method="elf"
	methodargs="-telf"
fi

if [ "$1" = "--root" ]; then
	if [ -z "$2" -o \! -d "$2" ]; then
		usage "given '$2' root directory doesn't exist"
	fi
	root="--root $2"
	shift
	shift
else
	root=
fi

# check command line args
if [ $# -lt 3 ]; then
	usage "not enough arguments"
fi

fun=$1
if [ -z "$fun" ]; then
	fundir=$name
else
	fundir=$fun
fi
limit=$2
shift
shift

# check for printf without full backslash support
printf '\xF0'|grep -q F0
if [ $? -eq 0 ]; then
	if [ \! -x /usr/bin/printf ]; then
		echo "ERROR: 'printf' is missing backslash support!" >&2
		exit 1
	fi
	printf=/usr/bin/printf
	echo "Warning: 'printf' without escape support, using '$printf' instead."
else
	printf=printf
fi

# if path given for script, make sure rest of things can be
# executed from that path too (helps testing it)
if [ \! -z "${0%/*}" ]; then
	export PATH=$PATH:${0%/*}
fi

# check for required utilities
check_resolve ()
{
	if [ -z $(which sp-rtrace-resolve) ]; then
		echo "ERROR: 'sp-rtrace-resolve' utility missing from PATH"
		exit 1
	fi
	if [ -z $(which sp-rtrace-postproc) ]; then
		echo "ERROR: 'sp-rtrace-postproc' utility missing from PATH"
		exit 1
	fi
}
check_calltree ()
{
	if [ -z $(which rtrace-calltree) ]; then
		echo "ERROR: 'rtrace-calltree' utility missing from PATH"
		exit 1
	fi
}
check_dot ()
{
	if [ -z $(which dot) ]; then
		echo "ERROR: 'dot' utility is missing from PATH"
		echo "- 'dot' it used for converting the graphs into SVG"
		echo "- you can get it from http://www.graphviz.org/"
		echo "  (configure GraphViz with '--without-x')"
		exit 1
	fi
}

# post-processes given (binary) trace file, uses $src and $dst
convert_binary ()
{
	# merge & remove leaks & resolve
	echo "- Removing freed allocations and resolving traces:"
	elfsrc=$(echo $dst|sed 's/-bfd-/-elf-/')
	if [ $elfsrc != $dst -a -f $elfsrc ]; then
		# save memory and time by wasting a bit more disk
		echo "  (converting already ELF resolved file with BFD & debug symbols)"
		echo "  sp-rtrace-resolve $root $methodargs < $elfsrc > $dst"
		sp-rtrace-resolve $root $methodargs < $elfsrc > $dst
	else
		echo "  sp-rtrace-postproc -cl < $src | sp-rtrace-resolve $root $methodargs > $dst"
		sp-rtrace-postproc -cl < $src | sp-rtrace-resolve $root $methodargs > $dst
	fi
	if [ $? -ne 0 ]; then
		echo "  ERROR: conversion failed!"
		rm $dst
		exit 1
	fi
	return 0
}

# post-processes given ASCII trace file, uses $src and $dst.
# Unlike binary traces, ASCII trace allows skipping unnecessary steps
convert_ascii ()
{
	# is all necessary filtering and resolving already done?
	if [ \! -z "$(head -1 $src|grep leaks|grep compress|grep resolve)" ]; then
		# can be used as such
		echo "- Can be used without post-processing."
		dst=$src
		return 0
	fi
	# check that there's something to callgraph...
	depth=$(head -1 $src|sed 's/^.*depth=\([0-9]\+\),.*$/\1/')
	if [ -z "$depth" ] || [ $depth -lt 2 ]; then
		echo "  SKIPPING: backtrace depth $depth < 2"
		return 1
	fi
	# filter & resolve
	head -1 $src|grep -q resolve
	if [ $? -eq 0 ]; then
		echo "- Already resolved, doing just freed resources removal and backtrace"
		echo "  merging, for speed reasons.  Remove 'resolve' flag from first line"
		echo "  in trace to trigger re-resolving:"
		echo "  sp-rtrace-postproc -cl < $src > $dst"
		sp-rtrace-postproc -cl < $src > $dst
		if [ $? -ne 0 ]; then
			echo "  ERROR: conversion failed!"
			rm $dst
			exit 1
		fi
	else
		# same steps as with binary
		convert_binary
	fi
	return 0
}

mkdir -p $fundir

# process all given trace files
echo "-------------------------------------------------------------------"
count=0
for src in $*
do
	echo "Post-processing '$src'..."
	if [ \! -f $src ]; then
		usage "given '$src' trace file doesn't exist"
	fi
	dst=${src%-callgraph*}
	dst=${dst%.rtrace.txt}
	dir=${dst%.rtrace}
	dst=${dst%.txt}
	dst=$dst-$method-callgraph.rtrace.txt
	echo "'$src' -> '$dst'"

	if [ "$src" = "$dst" ]; then
		if [ -z "$(head -1 $src|grep leaks|grep compress|grep resolve)" ]; then
			echo "  SKIPPING: target file already exists, but it lacks required filtering."
			echo "  Remove it if you want it to be regenerated correctly!"
			continue
		fi
		depth=$(head -1 $src|sed 's/^.*depth=\([0-9]\+\),.*$/\1/')
		if [ -z "$depth" ] || [ $depth -lt 2 ]; then
			echo "  SKIPPING: backtrace depth $depth < 2"
			continue
		fi
		echo "- File is already post-processed."
	elif [ -f $dst ] && [ $dst -nt $src ]; then
		echo "- Post-processed '$dst' trace exists already."
	elif [ "$(dd if=$src bs=1 count=1 2> /dev/null)" = "$($printf '\xF0')" ]; then
		convert_binary
	elif [ "$(dd if=$src bs=8 count=1 2> /dev/null)" = "version=" ]; then
		convert_ascii
	else
		usage "'$src' is neither binary nor text trace file"
	fi
	if [ $? -ne 0 ]; then
		# conversion failed, skip
		continue
	fi

	# remove path & extention
	dot=${dst##*/}
	dot=${dot%.rtrace.txt}
	# add own extention
	dot=$fundir/$dot.dot
	if [ \! -f $dot ] || [ $dot -ot $dst ]; then
		check_calltree
		echo "Generating call tree..."
		echo "'$dst' -> '$dot'"
		rtrace-calltree --type=graph --limit=$limit --emph-limit=4 \
		--include-only=$fun --ignore-libc-allocs=yes \
		$dst > $dot
		if [ $? != 0 ]; then
			rm $dot
			echo "ERROR: 'rtrace-calltree' call failed"
			exit 1
		fi
	fi
	svg=${dot%.dot}.svg
	if [ \! -f $svg ] || [ $svg -ot $dot ]; then
		check_dot
		echo "Plotting function call graph..."
		echo "'$dot' -> '$svg'"
		dot -Tsvg $dot > $svg
		if [ $? != 0 ]; then
			rm $svg
			echo "ERROR: 'dot' (GraphViz) call failed"
			exit 1
		fi
		echo "xdg-open $svg &"
		xdg-open $svg &
		count=$((count+1))
	fi
done

if [ $count -eq 0 ]; then
	echo
	echo "NOTE: All .rtrace.txt, .resolved or .dot files already processed."
	echo
fi

echo "-------------------------------------------------------------------"
echo
echo "Generated graphs of allocations going through methods/functions/libs"
echo "which names start with '$fun' which includes nodes through which"
echo "went at least $limit% of those allocations."
echo
echo $fundir/
ls $fundir/*.svg $fundir/*.dot|sed 's/^/- /'
echo
echo "DONE!"
