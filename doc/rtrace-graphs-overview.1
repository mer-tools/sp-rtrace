.TH RTRACE-GRAPHS-OVERVIEW 1 "2012-06-05" "sp-rtrace"
.SH NAME
rtrace-graphs-overview - create overview graphs for rtrace reports
.SH SYNOPSIS
rtrace-graphs-overview [--bfd] [--root <path>] <rtrace files>
.SH DESCRIPTION
\fIrtrace-graphs-overview\fP is a helper script to generate several
overview graphs of the given resource traces. Graphs include both
alloc total timeline and count histogram in PNG format and
a callgraph as SVG file.
.PP
By default input is expected to be an unprocessed binary resource
trace file, but in case you want to do the address resolving on
another device (with correct binaries and debug symbols), it can
also handle already processed ASCII trace files.  These won't be
post-processed or re-resolved.
.PP
If tools needed for producing the graphs or the intermediate steps are
missing, script will just provide the input files for further steps.
.SH OPTIONS
.TP
\fI--bfd\fP
Do resolving with BFD + debug symbols which gives also static function
names, line number etc. instead of using the default ELF symbol table
based resolving which gives just the names of the exported functions.
.PP
BFD resolving isn't the default because without debug symbols the
results are worse (misleading).  It's also much slower and takes
a lot of memory.
.PP
Typical workflow would be that if the default, ELF resolved callgraph
shows something interesting, you install debug symbols for everything
visible in the graph and run the script again with BFD resolving.
.TP
\fI--root\fP \fIpath\fP
.PP
With --root option, resolving is done based on binaries (and their
debug symbols) residing in the target file system which root is
at given path.
.PP
When using --root option together with --bfd option,
<path>/usr/lib/debug<path> needs to point to (=symlink)
<path>/usr/lib/debug, otherwise (sp-rtrace-resolve/libbfd)
debug symbols will be missed.
.PP
Note that to get best resolving results (with --bfd), resolving should
be done with the same system as where the tracing was done, not on PC
with --root option. Otherwise e.g. C++ method calls which argument
handling involves creating and destroying inlined object(s)
\fIwithin\fP the method call, may get resolved to a destructor
of an inlined object instead of that method call.
.SH FILES
The produced files have the same file names as input files with
following extensions appended to them:
.TP
.B -timeline.rtrace.txt
data post-processed for \fIsp-rtrace-timeline\fP use.
.TP
.B -timeline-*.png
PNG timeline and histogram graphs generated by \fIsp-rtrace-timeline\fP
with Gnuplot about unfreed allocations total and allocation count/size
histogram.
.TP
.B -callgraph.rtrace.txt
data post-processed and resolved for \fIrtrace-calltree\fP use.
.TP
.B -callgraph.dot
GraphViz input files generated by \fIrtrace-calltree\fP.
.TP
.B -callgraph.svg
SVG callgraph files generated by \fIdot\fP from
the \fIrtrace-calltree\fP output .dot files.  These show
a general overview of the allocations.
.PP
PNG, SVG and intermediate dot files are saved to an "overview"
subdirectory in current directory and the post-processed *.rtrace.txt
trace files into same directory where the input files are (so that it's
easier to share them with \fIrtrace-graphs-function\fP script).
.PP
Callgraph related file names contain also "elf" or "bfd" string
to indicate which method was used to resolve symbols in them.
.PP
To re-generated the files, just remove them or the "overview"
directory and re-run the \fIrtrace-graphs-overview\fP script.
.SH DETAILS
\fIrtrace-graphs-overview\fP automatically post-processes the given
(binary or ASCII) resource trace files using the \fIsp-rtrace\fP utilities,
then generates several allocation overview statistics charts with
\fIsp-rtrace-timeline\fP (and Gnuplot) and finally creates callgraph
overview of largest allocations with \fIrtrace-calltree\fP (and
GraphViz).
.PP
Post-processing includes merging backtraces to speed up their processing
for timeline and removing the backtraces to reduce the file size; for
callgraphs removing freed allocations and resolving the function addresses
in the backtraces.  Last one requires appropriate binaries, libraries and
(optionally) their debug symbols to be present, either in the system or at
given \fI--root\fP path.
.PP
\fIrtrace-graphs-overview\fP gives \fIrtrace-calltree\fP options which
should create reasonable graphs even for very complicated programs.
If you want to see more details, use either \fIrtrace-graphs-function\fP
or just call \fIrtrace-calltree\fP (and \fIdot\fP) with options suitably
modified from the ones (shown to be) used by this script.
.PP
To get more details from \fIsp-rtrace-timeline\fP graphs, use --scalex
option for histograms and --filter option(s) for other graphs.
.PP
Intermediate files aren't removed so that you can do this kind of
fine-tuned processing on them and also to be able to do the resolving
on a target device with all the debug symbols and then move the
generated files to PC where you re-run the script to generate
graphs out of them.
.SH SEE ALSO
.IR rtrace-rename (1),
.IR sp-rtrace-resolve (1),
.IR sp-rtrace-postproc (1),
.IR sp-rtrace-timeline (1),
.IR rtrace-graphs-function (1),
.IR rtrace-calltree (1),
.IR gnuplot (1),
.IR dot (1)
.SH COPYRIGHT
Copyright (C) 2007,2010-2012 Nokia Corporation.
.PP
This is free software.  You may redistribute copies of it under the
terms of the GNU General Public License v2 included with the software.
There is NO WARRANTY, to the extent permitted by law.
