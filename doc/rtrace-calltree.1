.TH RTRACE-CALLTREE 1 "2011-03-18" "sp-rtrace"
.SH NAME
rtrace-calltree - generate callgraphs from rtrace trace data
.SH SYNOPSIS
rtrace-calltree [options] <rtrace report>  >  report.dot
.SH DESCRIPTION
\fIrtrace-calltree\fP can produce different callgraphs from rtrace
resource allocation/deallocation reports.
From these reports you can see for example which of the functions
account for most of the resource usage and how
the resource allocations are divided between the functions they call.
Rtrace report is sp-rtrace report post-processed with
\fIsp-rtrace-postproc\fP \fI-c[l]r\fP options.
.PP
\fIrtrace-calltree\fP works by accumulating the allocations upwards in
the backtrace calltrees.  Each function is a node in the allocation
graph. Once all allocations are propagated to the functions from
which the calls to the allocation function originated, the information
is output into the requested callgraph type.  Bactrace items which have
just addresses instead of function/method names are ignored.
.SH OUTPUT REPORT TYPES
\fIrtrace-calltree\fP supports couple of different callgraph types:
.TP
\fBgraph\fP
A callgraph of through which functions largest \fIamounts\fP of allocations
are done in total.  This is the default.  Typically you want this for
a trace of non-freed allocations to see where the process memory goes.
.TP
\fBcount\fP
A callgraph of through which functions largest \fInumber\fP of allocations
are done.  Typically you would want this for trace that contains also
freed allocations.  Huge number of allocations can indicate performance
bottlenecks (not necessarily due to allocs, but due to what higher level
operations caused them) and if they're mostly freed, those operations
may actually be redundant.
.TP
\fBtopmost\fP
A callgraph of allocations having the highest (memory) addresses.
This is useful for finding out allocations that fragment the heap and
prevent freed memory from being returned back to the system. The count
and total size of allocations listed in this graph is for all
the backtraces in the trace file, not just for the ones
included into \fItopmost\fP graph.
.PP
Note that number of called functions and amount of allocations do not
always match exactly between caller and called functions.  This can be
for several related reasons; the backtraces were not deep enough to go
up to main() or unwinding there failed, there were debug symbols missing
to get the function/method names, --show-below-limit=no was used or there
were disjoint calltrees which sum of allocations were below the used --limit
option.
.PP
Graphs are output in \fIdot\fP format.  You will need either a program
that can view them directly, like xdot.py, or GraphViz package
to generate PostScript, SVG, PNG etc. formats out of them.
.SH REPORT OUTPUT OPTIONS
.TP
\fB--type\fP=\fIvalue\fP
Value is one of the above report types.
.TP
\fB--depth\fP=\fIvalue\fP (topmost report)
Depth value is an integer (1-99), in topmost report it specifies
how many of the traces to highest allocations are shown. Default
is 3.
.TP
\fB--direction\fP=\fIvalue\fP (graph and html reports)
The report direction value is either \'tb' for top to bottom
(i.e. from main() towards allocs) or 'bt' for bottom to top
(i.e. from allocs towards main()).  Default is 'tb'.
.TP
\fB--emph-limit\fP=\fIvalue\fP (graph report)
Value (1.0-100) is used to indicate that function nodes responsible for
more than the given percentage of total allocations should be emphasized.
Default is 60.0.
.TP
\fB--own-alloc-limit\fP=\fIvalue\fP (graph report)
value is a factor (1.1 - 10) used to indicate how much single node needs
to do more allocations than all of its children together for it to be
emphatized.  Only nodes whose allocations go over the --emph-limit
value are checked for this. Default is 1.2.
.TP
\fB--cluster\fP=\fIvalue\fP (graph report)
Value is the name for the library or code file which nodes should be
clustered together.
.PP
Note: this option is useless with recursive backtraces, for UI applications
you should use also --ignore-glib/gtk/qt-internals=yes.
.SH OPTIONS FOR FILTERING INCLUDED ALLOCATIONS
If you want to dig more into information provided by the timeline
script and allocation histogram, you can select just a subset
of the traced allocations to the report.  Options for doing that are:
.TP
\fB--size-range\fP=\fI[smallest]\fP-\fI[largest]\fP
Values are sizes of the smallest and largest allocations that will
be included to the report.
.SH OPTIONS FOR FILTERING BACKTRACE CONTENT
Programs doing a lot of allocations with complex backtraces produce
so much data that you really cannot analyse it without reducing the
amount of nodes in the graph.  Options for doing that are:
.TP
\fB--limit\fP=\fIvalue\fP
The given value (0.1-100) is a minimum percentage of how much
of the allocations need to go through the given function for it
to get included.  Default is 10.0.
.PP
Note: If you make this very small, either --include-only or --stop
option usage is recommended to limit the graph only to a subset.
.TP
\fB--show-below-limit\fP=\fIno\fP
Do not show nodes summarizing how many called nodes were below
the specified (or default) limit (see --limit option).  Because
their share of allocs is still counted in the shown nodes, this
means that the values shown in the callgraph won't add up
(which can confuse people reading the callgraph).
.TP
\fB--stop\fP=\fIvalue\fP
Value is a string prefix of node name where each backtrace parsing
stops (when going from allocation towards main()).  For example using
something like following could make Gtk memory allocation graphs more
readable (or you could use just --ignore-gtk-internals=yes):
.br
		--stop=g_cclosure_marshal --stop=_gtk_marshal
.TP
\fB--include-only\fP=\fIvalue\fP
Value is a string prefix for node names for backtraces that should be
included into reports.  All backtraces \fBnot\fP containing a node
name starting with this substring are ignored.
.TP
\fB--include-only-args\fP=\fIvalue\fP
Value is a substring for traced function argument values for which
backtraces should be included into report.  All backtraces NOT having
an argument value that contains this substring are ignored. NOTE: this
needs also --show-args=yes option and it cannot work properly for
merged backtraces ("-c" option for \fIsp-rtrace-postproc\fP).
.TP
\fB--ignore\fP=\fIvalue\fP
Value is a string prefix for node names which should be ignored in the
backtraces.  Useful for making graphs more readable.  Instead of this,
one can also use the shortcut options below. Use --verbose to see what
is ignored by them.
.TP
\fB--ignore-middle\fP=\fIvalue\fP
Like --ignore, but given substring is for any part of the function names
This is useful e.g. with template functions as their names are prefixed
with a changing return type.
.TP
\fB--no-ignore\fP=\fIvalue\fP
Value is a string prefix for node names that should be kept in the
backtraces although they were matched by --ignore or --ignore-middle.
.TP
\fB--ignore-font-allocs\fP=\fIyes\fP
Shortcut to ignore lower level freetype and fontconfig allocation functions.
.TP
\fB--ignore-libc-allocs\fP=\fIyes\fP
Shortcut to ignore lower level C-library and C++ allocation functions
to make graphs more readable.
.TP
\fB--ignore-glib-internals\fP=\fIyes\fP
Shortcut to ignore several lowest level allocation, standard data
structure handling and recursed functions called by Glib programs.
You might want to try also these options:
.nf
		--leafs=no
		--intermediate=no
		--show-below-limit=no
		--ignore=dcgettext
		--ignore=tsearch
		--join=ld-<version>
.fi
.TP
\fB--ignore-gtk-internals\fP=\fIyes\fP
Shortcut to ignore several recursed functions called by Gtk
applications.  You might want to try also these options:
.nf
		--ignore-libc-allocs
		--ignore-font-allocs
		--ignore=gtk_widget_
		--no-ignore=gtk_widget_show
		--ignore=gdk_window_
		--ignore=_gdk_window_
		--join=fontconfig
.fi
.TP
\fB--ignore-qt-internals\fP=\fIyes\fP
Shortcut to ignore lower level Qt allocation, standard data
structure handling and marshalling/recursed functions called by Qt
applications.  You might want to try also these options:
.nf
		--ignore-glib-internals=yes
		--join=qt_format_text
.fi
.TP
\fB--join\fP=\fIvalue\fP
Value is the name for the function, library or source
code file which nodes should be represented as a single node.
.TP
\fB--intermediate\fP=\fIno\fP
Leave out nodes with only one parent and child.
.TP
\fB--leafs\fP=\fIno\fP
Leave out nodes which have either one parent and no children, or
one child and no parents.
.TP
\fB--show-args\fP=\fIyes\fP
Show trace functions arguments in addition to trace functions.  This
can be used e.g. to get callgraphs to individual file names in file
descriptor traces.  To limit this set, use --include-only-args option.
.PP
Options --stop, --ignore, --include-only, --join and --cluster
can be given as many times as you wish and they apply to all
values you gave. For all the other options, only the last value
applies.
.SH REDUCING GRAPH SIZE BY MINIMIZING THE NODE SIZES
.TP
\fB--keep-types\fP=\fIyes\fP
Whether to show overloaded C++ method signature arguments.
These are removed by default as they can be very long.
.TP
\fB--keep-paths\fP=\fIyes\fP
Whether to show full paths in file names. By default path is stripped out.
.TP
\fB--keep-filenames\fP=\fIno\fP
Whether to show source filenames (+ line numbers). Shown by default.
.SH MINIMIZING THE NODE SIZES AFTERWARDS
If you haven't used above options for reducing graph node sizes,
you can post-process the resulting dot file to achieve the same thing,
which is faster than re-generating the .dot file.
.PP
To remove function and method arguments, pipe output through:
.nf
		sed -e 's/([^0-9)][^)]*)/()/' -e 's/)(.[^)]*)//'
.fi
To remove also source file names and line numbers, add:
.nf
		-e 's/ at [^ \\\\]*//'
.fi
To remove also paths from the --show-args file names, add:
.nf
		-e 's%/.*[^ ]/%%'
.fi
To split --show-args file paths and names just to separate rows,
use instead:
.nf
		-e 's%/\\([^/]*>\\)%/\\\\n\\1%'
.fi
.SH DEBUG OPTIONS
.TP
\fB--node\fP=\fIvalue\fP
Show internal information about given node. This option can be given
as many as times as needed. '*' will show information about all nodes.
.TP
\fB--progress\fP=\fIyes\fP
Show running parsed alloc/free record index number.
.TP
\fB--show-references\fP=\fIyes\fP
Show what other nodes refer nodes specified with the --node option.
.TP
\fB--verbose\fP=\fIyes\fP
Show more information about rtrace-calltree internal working.
.SH USAGE EXAMPLES
Typical first usage looks like this:
.nf
	rtrace-calltree --limit=4 app.rtrace.txt > app.dot
.fi
.SH LIMITATIONS / TODOS
Currently user needs to generate each graph type separately,
\fIrtrace-calltree\fP cannot create multiple reports in the same run.
.PP
\fIrtrace-calltree\fP doesn't have as extensive options for filtering
the included allocations as \fIsp-rtrace-timeline\fP has.
.SH SEE ALSO
.IR sp-rtrace (1),
.IR sp-rtrace-timeline (1),
.IR rtrace-graphs-function (1),
.IR rtrace-graphs-overview (1),
.IR valgrind (1),
.IR dot (1)
.SH COPYRIGHT
Copyright (C) 2007-2011 Nokia Corporation.
.PP
This is free software.  You may redistribute copies of it under the
terms of the GNU General Public License v2 included with the software.
There is NO WARRANTY, to the extent permitted by law.
