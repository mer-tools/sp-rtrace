Binary data protocol
--------------------

The binary data is generated by the main tracing module and parsed by
the post-processor. The protocol consists from the handshake packet
sent right after estabilishing the connection and data packets generated
by trace events.

Handshake packet:
The handshake packet is the first packet of the binary data protocol.
It contains information about protocol version and source system
architecture. 
The handshake packet is endian independant - any system/architecture
should be able to read/parse it and decide if it supports the specified
protocol version/system architecture or not.
The size of handshake packet is padded to ensure 4 byte alignment of the
following packages.

[id][size][version][archictecture]
  [id] - the binary protocol identification, 0xF0 (1 byte).
  [size] - the packet size (1 byte)
  [version] - the packet version [major][minor]
    [major] - the version major number (1 byte)
    [minor] - the version minor number (1 byte)
  [architecture] - the source system architecture [length][text]
    [length] - the text length - n (1 bytes)
    [text] - the text data (n bytes);
  [endianess] - endianess of the source system (1 byte)
                0 - little endian, 1 big endian
  [pointer size] - size of pointers in the source system (1 byte)
                   usually 4 for 32 bit systems and 8 for 64 bit systems.

The rest of packets are endian dependent and have the following generic
format:

[type][size][data]
  [type] - the packet type (4 bytes)
  [size] - the data length n (4 bytes)
  [data] - the packet data (n bytes)

The data members inside packets are aligned by 4 byte boundaries to prevent
from unaligned memory access which can be problem on some architectures.


Generic data types used in the protocol:

[byte] - byte/char, used only in handshake packet (1 byte)
[dword] - dword/int (4 bytes)
[pointer] - pointer/void * (4 or 8 bytes, depending on system architecture)
[string] - length prefixed string [length][text]
  [length] - the string length - n (word)
  [text] - the string data (n bytes). The text is padded with '\0' characters
  so that the whole string size is 4 byte aligned. A special case is NULL string,
  where [length] is zero (implying no [text] data), but the string is still padded
  with two '\0' characters so that the whole string size is 4 byte aligned.


The Protocol defines following packet types:

1. Process information [PINF]
The process information packet is sent when the tracing is started.

[pid][timestamp][name]
  [pid] - process identifier (dword).
  [timestamp] - trace starting timestamp [secs][usecs].
    [secs] - seconds since the Epoch (dword).
    [usecs] - microsecond since the Epoch (dword).
  [depth] - the backtrace depth setting [v1.2] (dword)
  [name] - the process name (string).
  
  
2. Module information [MINF]
The module information packet is sent when tracing is started.

[id][version][name]
  [id] - the module identifier. Used to estabilish tracing record ownership
		 when multiple tracing modules are used
  [version] - module version (dword). High word contains major version number
             and low word - minor.
  [name] - the module name (string).

   
3. Memory mapping [MMAP]
The memory mapping packets contains start/end addresses and names of the
executable modules mapped in memory. 

[from][to][path]
  [from] - start adress (pointer)
  [to] - end address (pointer)
  [path] - the module path (string)


4. Context registry [CTXR]
The context registry packet is sent when a call context is created by
sp_context_create function. It contains context id and name.

[id][name]
  [id] - context id (dword)
  [name] - context name (string)


5. Function call [CALL]
Function call packet is sent when a function call has been done.

[timestamp][resource type][context][type][name][id][size]
  [timestamp] - the timestamp containing milliseconds since midnight(?) (dword).
  [resource type] - the resource type id. 0 if only one resource type is tracked.
  [context] - the call context (dword)
  [type] - the call type (allocation/deallocation/copying) (dword)
  [name] - the function name (string)
  [id] - the resource identifier (pointer)
  [size] - the resource size (integer)


6. Backtrace [BTRC]
The backtrace packet is sent after function call packet. It contains
stack trace of the last function call.

[nframes][address][address]...[address]
   [nframes] - number of addresses (dword)
   [address] - return address from the corresponding stack frame (pointer)


7. Function arguments [ARGS]
The function arguments packet is an optional packet which could be sent after FC+BT
packets. It contains detalized information about function arguments.

  [number][arg1][arg2]...[argN]
    [number] - the number of function arguments (dword)
    [arg1][arg2]...[argN] - function argument list
      [argX] - the function argument X ([name][value])
        [name] - the function argument name (string)
	[value] - te function argument value (string)

8. New library [NLIB]
The new library packet is sent at beginning and whenever a new library
is loaded with dlopen() function. This packet is only sent from the main
tracing module to the pre-processor and is not stored into log file or
forwarded to post-processor. 

  [name] - the library name (string). Specify * to scan all libraries.
  
  
9. Heap information [HINF]
The heap information packet is sent at the end of the report (before the
trace is disabled or target process has been finished). It contains
heap statistics returned by mallinfo() function if sp_rtrace_store_heap_info()
was called during the trace.

[hbottom][htop][arena][ordblks][smblks][hblks][hblkhd][usmblks][fsmblks]
  [uordblks][fordblks][keepcost]

  [hbottom] - heap bottom (pointer);
  [htop] - heap top (pointer);
  [arena] - the total size of memory allocated with sbrk by malloc, 
  	in bytes (dword).
  [ordblks] - the number of chunks not in use (dword).
  [smblks] - the number of number of fastbin blocks (dowrd).
  [hblks] - the total number of chunks allocated with mmap (dword).
  [hblkhd] - the total size of memory allocated with mmap, in bytes (dword).
  [usmblks] - the maximum total allocated space (dword).
  [fsmblks] - the space available in freed fastbin blocks (dword).
  [uordblks] - the total size of memory occupied by chunks handed out by malloc (dword).
  [fordblks] - the total size of memory occupied by free (not in use) chunks (dword).
  [keepcost] - the size of the top-most releasable chunk that normally borders the end
	   of the heap (dword).
  
  

10. Output settings [OCFG]
The output settings packet contains post-processor options and output
directory path. This packet is used to pass the post-processor options
back to the sp-rtrace when it's used in toggle mode to enable tracing.
The OS packet is not stored on disk or passed to post-processor.

[path][options]
  [path] - the output directory (string)
  [options] - the post-processor options (string)

11. Resource registry [RESR]
The resource registry packet contains resource type id and name. If multiple
resource types are being tracked, then resource id is used to identify
the tracked resource type in function call records.

[id][name]
  [id] - the resource type id (dword)
  [flags] - flags describing resource behaviour (dword)
            0x0001 - refcount flag. Set if the resource allocs/frees uses reference 
	             counting.
  [type] - the resource type (string)
  [desc] - the resource desription (string)

12. File attachment [FILE]
File attachment packet is used to bundle the sp-rtrace log with a custom data
stored in a file. The attached files are optional and are used only by specific
post-processing tools. The files are stored in the same directory as the sp-rtrace
log files. 

[name][path]
  [name] - the attachment name (string). The name must consist of alphanumeric charaters.
  [path] - the attached file name (string)

The name is used to identify attachment type, while the path points to the real file name.

--------------
Version log

v1.4
Added file attachment packet.

v1.2
Added backtrace depth field to process info packet.

v1.0 
Initial protocol release.
  